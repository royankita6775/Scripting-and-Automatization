#----------------------------------------------

#---1---

#Create a script that asks values from the user until user types exit.
#All the values are saved in array.
#Finally script prints out the whole array (line by line) using the following syntax: index: value.


array1=()
helper=0

until [ ${helper} -eq 1 ]
do
  read -p "give a value (exit=stop): " value
  if [ ${value} = exit ]
  then
    helper=1
  else
    array1+=(${value})
  fi
done


for index in ${!array1[@]}
do
  echo "index: ${index}, value: ${array1[${index}]}"
done


#-------------------------------------------------

#---2---

#Create a script that prints a number of objects in a active directory.
#Script must consist a function called count_objects.
#Function must have one local variable, that will hold the actual value, before it's printed to the user.


count_objects() {
local count=$(ls | wc -l)
echo "Active directory contains ${count} objects"
}

count_objects


#------------------------------------------------

#---3---

#Modify Task 2.
#Create a script that prints a number of objects in a given directory to the user.
#The path is asked from the user.


count_objects() {
local count=$(ls ${1} | wc -l)
echo "Active directory contains ${count} objects"
}

read -p "Give a directory path: " dir
count_objects ${dir}


#--------------------------------------------------

#---4---

#Modify Task 3.
#User can give unlimited number of paths and given paths are saved in the array.
#Function takes an array as an argument.
#Hints:read commands options might be useful or some kind of loop.


count_objects() {
for value in ${@}
do
  local count=$(ls ${value} | wc -l)
  echo " Directory ${value} contains ${count} objects"
done
}

read -p "Give folder paths, separated by spaces: " -a  array1
count_objects ${array1[@]}


#-----------------------------------------------------

#---5---

#Modify Exercise set 2, Task 5 (Create a script that mimics a simple calculator).
#Change the logic that all operations are calculated by using functions.


add() {
 let "solution = ${1} + ${2}"
 echo "${1}+${2}=${solution}"
}

sub() {
 let "solution = ${1} - ${2}"
 echo "${1}$-${2}=${solution}"
}

ask_values() {
read -p "Input number 1: " num1 #note that variables are global by default
read -p "Input number 2: " num1
}


while true
do
 read -p "Input operation (add, sub or exit) : " operation
 if [ ${operation} = exit ]
 then
   break
 else
  case ${operation} in
    add)
	  ask_values
      add ${num1} ${num2}
      ;;
    sub)
	  ask_values
      sub ${num1} ${num2}
      ;;
	*)
	  echo "Operation unknown!"
	  ;;
  esac
 fi
done

#-----------------------------------------------------
